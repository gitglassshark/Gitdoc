#include <iostream>
#include <algorithm>
#include <fstream>
#include <bitset>
#include <string>
#include <cstring>
#include <vector>
#include <stack>
#include <deque>
#include <queue>
#include <list>
#include <map>
#include <set>
#include <stdio.h>
#include <stdlib.h>
#include <typeinfo>
#include "mylib.hpp"
#include "temptest.hpp"
#include "class.hpp"
#include "menu.hpp"

using namespace std;
int TestGround(int argc,char * argv[] );

int PrintLongSizeL(int argc, char *argv[])
{
    cout<<"long long sizeof is "<<sizeof(long)<<endl;
    int  isizeoflong =sizeof(long);
    isizeoflong =sizeof(long)*8;
    unsigned long  lmaxlong =1;
    for(int i=0; i<isizeoflong-1; i++)
        lmaxlong*=2;
    cout<<"long sizeof is "<<sizeof(long)<<endl;
    cout<<"max long is "<<lmaxlong<<endl;
    cout<<"int sizeof is "<<sizeof(int)<<endl;
    return 0;
}

int none()
{
    // 测试变量作用域,
    int key=100;
    {
        cout<<"in {}key is "<<endl;
        int key=200;
        cout<<key<<endl;
    }
    cout<<key<<endl;
    int i=22;
    for(int i=0; i<9; i++)
    {
        if(i==8)
        {
            cout<<"in if, i=8"<<i<<endl;
        }
        if(i==9)
        {
            cout<<i<<endl;
        }
    }
    cout<<i<<endl;
    return 0;
}

int two(int argc,char * argv[] )
{
    //测试函数原型作用域及可见性
    cout<<"in test......\n测试函数原型作用域及可见性"<<endl;
    cout<<"end test......"<<endl;
    return 0;
}

int three( int argc, char *argv[])
{
    int iArgcTotalL=0;
    cout<<"打印参数列表："<<endl;
    for(int i=0; i<argc; i++)
    {
        iArgcTotalL+=atoi(argv[i]);
        cout<<argv[i]<<endl;
    }
    cout<<iArgcTotalL<<endl;
    return 0;
}

int four(int argc,char * argv[] )
{
    int i=100;
    int &x=i;
    cout<<x<<endl;
    cout<<i<<endl;
    x++;
    cout<<x<<endl;
    cout<<i<<endl;
    i++;
    cout<<x<<endl;
    cout<<i<<endl;
    return 0;
}

int five(int argc,char * argv[] )
{
    cout<<"line one\n" "line two"
        "line one\n" "line two"
        <<endl;
    //    cout<<constintest*2<<endl;
    return 0;
}

int six(int argc,char * argv[] )
{
    star();
    //    string strArgOne=argv[1];
    //    cout<<atoi(strArgOne)<<endl;
    string strgetline;
    if(strgetline.empty())
        cout<<"string is empty now.\n";
    cout<<"string size is "<<strgetline.size()<<endl;
    getline(cin,strgetline);
    star();
    for(char c:strgetline)
        cout<<toupper(c);
    cout<<endl;
    star();
    for(char &d:strgetline)
        d=toupper(d);
    cout<<strgetline<<endl;
    star();
    int narray[100]= {0};
    for(int a:narray)
        cout<<a++<<'\t';
    for(int c:narray)
        cout<<c<<'\t';
    cout<<endl;
    //     cout<<strgetline<<endl;
    return 0;
}

int seven(int argc,char * argv[] )
{
    star();
    string strline;
    getline(cin,strline);
    cout<<strline<<endl;
    newline();
    for(char &a:strline)
    {
        if(ispunct(a))
            a=' ';
    }
    cout<<strline<<endl;
    cout<<endl;
    return 0;
}

int eight(int argc,char * argv[] )
{
    vector<string> iVecOne(10,"line\n");
    for(auto i:iVecOne)
        cout<<i;
    star();
    string strname("program test.cpp.\n");
    string::iterator iterstarname=strname.begin();
    while(iterstarname!=strname.end())
        cout<<*iterstarname++;
    return 0;
}

int vector_assign(int argc,char * argv[] )
{
    char t='\t';
    char e='\n';
    vector<int> v1,v2,v3;
    vector<int> v4(10,10);
    cout<<"v4:"<<e;
    for(auto v:v4)
        cout<<v<<t;
    cout<<endl;
    star();
    vector<int> v6(v4);
    v6.push_back(100);
    cout<<"v6:"<<e;
    for(auto v:v6)
        cout<<v+1<<t;
    cout<<endl;
    star();
    vector<int> v5(10);
    cout<<"v5:"<<e;
    for(auto v:v5)
        cout<<v<<t;
    cout<<endl;
    star();
    vector<int> v7{10,22,33,44,55};
    cout<<"v7:"<<e;
    for(auto v:v7)
        cout<<v<<t;
    cout<<endl;
    star();

    v1.assign(v7.begin(),v7.end());
    cout<<"v1:"<<e;
    for(auto v:v1)
        cout<<v+2<<t;
    cout<<endl;
    star();

    v2.assign(10,200);
    cout<<"v2:"<<e;
    for(auto v:v2)
        cout<<3+v<<t;
    cout<<endl;
    star();

    v3=v1;
    cout<<"v3:"<<e;
    for(auto v:v3)
        cout<<v<<t;
    cout<<endl;
    star();
    cout<<v3.at(1)<<endl;
    v3.at(1)+=10;
    cout<<v3.at(1)<<endl;
    cout<<v3.back()<<endl;
    cout<<*v3.begin()<<endl;
    cout<<*v3.end()<<endl;
    cout<<*(v3.end()-1)<<endl;
    cout<<*(v3.begin()+(v3.end()-v3.begin())/2)<<endl;
    star();
    cout<<"v1 capacity is "<<t<<v1.capacity()<<e;
    cout<<"v2 capacity is "<<t<<v2.capacity()<<e;
    cout<<"v3 capacity is "<<t<<v3.capacity()<<e;
    cout<<"v4 capacity is "<<t<<v4.capacity()<<e;
    cout<<"v5 capacity is "<<t<<v5.capacity()<<e;
    cout<<"v6 capacity is "<<t<<v6.capacity()<<e;
    cout<<"v7 capacity is "<<t<<v7.capacity()<<e;
    star();
    cout<<"v2:"<<e;
    for(auto v:v2)
        cout<<v<<t;
    cout<<endl;
    v2.clear();
    star();
    cout<<"v2:"<<e;
    for(auto v:v2)
        cout<<v<<t;
    cout<<endl;
    star();
    cout<<"v3:"<<e;
    for(auto v:v3)
        cout<<v<<t;
    cout<<endl;
    v3.resize(2);
    star();
    cout<<"v3:"<<e;
    for(auto v:v3)
        cout<<v<<t;
    cout<<endl;
    v3.resize(5);
    star();
    cout<<"v3:"<<e;
    for(auto v:v3)
        cout<<v<<t;
    cout<<endl;
    star();
    v3=v4;
    cout<<"v3:"<<e;
    for(auto v:v3)
        cout<<v<<t;
    cout<<endl;
    star();
    cout<<"v3[4]:"<<e;
    cout<<v3[4]<<t<<e;
    v3[4]+=20;
    cout<<v3[4]<<t<<e;
    star();
    decltype(v3) vx(v3);
    cout<<vx[4]<<e;
    cout<<vx[3]<<e;
    return 0;
}

int one(int argc,char * argv[] )
{
    string strname("program test.cpp.\n");
    string::iterator iterstarname=strname.begin();
    return 0;
}

int pointerandrefence(int argc,char * argv[] )
{
    int iarray[50];
    int (&rarray)[50]=iarray;
    for(auto &i:iarray)
    {
        i=2;
    }
    star();
    for(auto &i:iarray)
    {
        cout<<i<<t;
    }
    cout<<e;
    star();

    cout<<"print reference rarray value:\n";
    for(auto &i:rarray)
    {
        i=3;
    }
    star();
    for(auto &i:rarray)
    {
        cout<<i<<t;
    }
    cout<<e;
    cout<<"print reference iarray value:\n";
    star();
    for(auto &i:iarray)
    {
        cout<<i<<t;
    }
    cout<<e;
    star(8);
    int *pb=begin(rarray);
    int *pe=end(iarray);
    for(; pb!=pe; pb++)
        cout<<*pb<<t;
    cout<<e;
    star(9);
    char char1[10],char2[10];
    for(char &i:char1)
        i='a';
    *(end(char1)-1)='\0';
    for(char &i:char2)
        i='b';
    *(end(char2)-1)='\0';
    cout<<char1<<e<<char2<<e;
    if(strcmp(char1,char2)==0)
        cout<<"char1 equal char2.\n";
    else
        cout<<"char1 not equal char2.\n";
    cout<<"char1 length is:\t"<<strlen(char1)<<e;
    cout<<"char2 length is:\t"<<strlen(char2)<<e;
    char char3[strlen(char1)+strlen(char2)];
    strcpy(char3,char1);
    strcpy(char3+strlen(char1),char2);
    star(10);
    cout <<char1<<endl;
    cout <<char2<<endl;
    cout <<char3<<endl;
    cout<<"char3 length is:\t"<<strlen(char3)<<e;
    star();
    return 0;
}

int relationoperation(int argc,char * argv[] )
{
    star();
    bool btest1=false;
    bool btest2=false;
    bool btest3=false;
    btest1=argc==2?true:false;
    btest2=atoi(argv[1])==0?true:false;
    btest3=argc==4?true:false;
    if(btest1)
        cout<<"argc is 2"<<e;
    if(btest2)
        cout<<"argv1 is 0"<<e;
    if(btest3)
        cout<<"argc is 4"<<e;
    star();
    cout<<((btest2==true)?"true":"false")<<endl;
    return 0;
}

int bittest(int argc,char * argv[] )
{
    unsigned int i=1;
    unsigned int j=2;
    star();
    i<<1;
    cout<<i<<e;
    i<<1;
    cout<<i<<e;
    cout<<(i<<1)<<e;
    cout<<(i<<2)<<e;
    cout<<(i<<3)<<e;
    cout<<(i<<4)<<e;
    cout<<(i<<4)%2<<e;
    cout<<(i<<3)%2<<e;
    cout<<(i<<2)%2<<e;
    cout<<(i<<1)%2<<e;
    i<<=1;
    cout<<i<<e;
    i<<=3;
    cout<<i<<e;
    i>>=2;
    cout<<i<<e;
    i=0xffff;
    unsigned int i0=0xffff;
    unsigned int i1=0xfffe;
    unsigned int i2=0xfffd;
    unsigned int i3=0xfffb;
    unsigned int i4=0xfff7;
    unsigned int i5=0xffef;
    unsigned int izero=0x0000;
    j=1;
    bitset<32>x;
    bitset<64>y;
    star();
    typedef bitset<32> bit32;
    typedef bitset<64> bit64;
    cout<<((bitset<32>)i)<<endl;
    cout<<bitset<32>(i)<<endl;
    cout<<bit32(i)<<endl;
    cout<<(bit32)i<<endl;
    star();
    cout<<(bit64)i<<endl;
    star();
    cout<<(bit64)(i-i0)<<endl;
    cout<<(bit64)i0<<endl;
    star();
    cout<<(bit64)i1<<endl;
    cout<<(bit64)(i-i1)<<endl;
    star();
    cout<<(bit64)i2<<endl;
    cout<<(bit64)(i-i2)<<endl;
    star();
    cout<<(bit64)i3<<endl;
    cout<<(bit64)(i-i3)<<endl;
    cout<<(bit64)i4<<endl;
    cout<<(bit64)i5<<endl;
    star(8);
    bit64 i6=i5;
    y=i5;
    cout<<i6<<endl;
    cout<<y<<endl;
    y.reset();
    star(9);
    cout<<y<<endl;
    y[0]=1;
    y[3]=1;
    y[5]=1;
    cout<<y<<endl;
    y.set();
    cout<<y<<endl;
    y[0]=0;
    y[3]=0;
    y[5]=0;
    cout<<y<<endl;
    star(11);
    cout<<sizeof(bit64)<<e;
    size_t isize=sizeof (unsigned long);
    isize=sizeof (0UL);
    cout<<isize<<e;
    return 0;
}

int commatest(int argc,char * argv[] )
{
    int i=0;
    int y=100;
    star(1);
    cout<<i<<t<<y<<e;
    (i++,cout<<i<<e);
    cout<<i<<t<<y<<e;
    star(2);
    cout<<i<<t<<y<<e;
    cout<<(++i,++y)<<e;
    cout<<i<<t<<y<<e;
    star(3);
    cout<<i<<t<<y<<e;
    cout<<++(++i,++y)<<e;
    cout<<i<<t<<y<<e;
    star(4);
    cout<<i<<t<<y<<e;
    cout<<++(i,y)<<e;
    cout<<i<<t<<y<<e;
    star(5);
    cout<<++(i,y)<<e;
    cout<<i<<t<<y<<e;
    star(6);
    cout<<i<<t<<y<<e;
    return 0;
}

int sentencetest(int argc,char * argv[] )
{
    int array[36];
    star(1);
    cout<<sizeof(array)<<e;
    star(2);
    for(int &i:array)
        (i=&i-array,((&i-array+1)%6==0)?cout<<i<<e:cout<<i<<t);
    cout<<e;
    star(2);
    return 0;
}

int compundstatement(int argc,char * argv[] )
{
    int i=6;
    {
        int i=0;
        for(int i=0; i<9; cout<<i++)
            ;
        cout<<e<<i<<t<<e;
    }
    star(1);
    {
        int i=0;
        for(int i=0; i<9; cout<<i++)
            ;
        cout<<e<<i<<t<<e;
    }
    star(2);
    cout<<i<<t<<e;
    return 0;
}

int switchtest(int argc,char * argv[] )
{
    int i=1;
    bool icon=true;
    //    while(icon==true)
    while(i)
    {
        cout<<"Please input a number:(1-3,0 is exit) \t";
        cin>>i;
        cin.clear();
        switch(i)
        {
        case 1:
            cout<<"This is one condition..."<<e;
            break;
        case 2:
            cout<<"This is two condition..."<<e;
            break;
        case 3:
            cout<<"This is three condition..."<<e;
            break;
        case 0:
            icon=false;
            break;
        default:
            cout<<"This is default condition..."<<e;
        }
        cout<<"end"<<e;
    }
    return 0;
}

int dowhiletest(int argc,char * argv[] )
{
    cout<<"Is begin test......\n";
    int i=0;
    bool icon=true;
    do
    {
        cout<<"Please input a number:(1-3 to choice ,0 is exit)\t";
        cin>>i;
        cin.clear();
        switch(i)
        {
        case 1:
            cout<<"This is one condition..."<<e;
            break;
        case 2:
            cout<<"This is two condition..."<<e;
            break;
        case 3:
            cout<<"This is three condition..."<<e;
            break;
        case 0:
            icon=false;
            break;
        default:
            cout<<"This is default condition..."<<e;
        }
    }
    while(i!=0);
    return 0;
}
int breaktest(int argc,char * argv[] )
{
    bool bcontinue=false,bbreak=false,breturn=false;
    star("start:");
    int i=0;
    bool icon=true;
    do
    {
        cout<<"Please input a number:(1-3 to choice ,0 is exit)\n""1.This is break condition...\n""2.This is continue condition...\n""3.This is return condition...\n";
        cin>>i;
        cin.clear();
        switch(i)
        {
        case 1:
            bbreak=true;
            goto tagbreak;
            break;
        case 2:
            bcontinue=true;
            goto tagcontinue;
            break;
        case 3:
            breturn=true;
            goto tagreturn;
            break;
        case 0:
        default:
            icon=false;
            cout<<"This is default condition..."<<e;
        }
tagbreak:
        break;
tagcontinue:
        continue;
tagreturn:
        return 0;
        cout<<"This is innter dowhile end\n";
    }
    while(i!=0);
    cout<<"This is outside of while.\n";
    return 0;
}
int n=0;
long fact(int n,int m)
{
    long l=1;
    for(int i=n<m?n:m; i<=(n<m?m:n); ++i)
    {
        l*=i;
    }
    return l;
}

long fact(int n)
{
    long l=1;
    for(int i=1; i<=n; ++i)
    {
        l*=i;
    }
    return l;
}

int RunFactTestFn(int argc,char * argv[] )
{
    if(argc<4)
    {
        star();
        star(6);
        star(8);
        return 0;
    }
    int in=atoi(argv[2]);
    int im=atoi(argv[3]);
    starn();
    cout<<in<<"\'s fact is "<<fact(in)<<"."<<e;
    starn();
    cout<<im<<"\'s fact is "<<fact(im)<<"."<<e;
    starn();
    cout<<in<<"--"<<im<<"\'s fact is "<<fact(in,im)<<"."<<e;
    return 0;
}

int RunArrayTestFN(int argc, char *argv[])
{
    int RunArrayTestFN[10];
    for(auto &i:RunArrayTestFN)
        i=10;
    int *pbegin=begin(RunArrayTestFN);
    int *pend=end(RunArrayTestFN);
    starn();
    cout<<*pbegin<<t<<*(pend-1)<<e;
    *pbegin=20;
    *(pend-1)=30;
    starn();
    cout<<*pbegin<<t<<*(pend-1)<<e;
    starn();
    for(auto i:RunArrayTestFN)
        cout<<i<<t;
    cout<<e;
    starn();
    cout<<"end()-begin() is "<<end(RunArrayTestFN)-begin(RunArrayTestFN)<<e;
    return 0;
}

int rl(int &argc)
{
    star(2);
    return 0;
}

int rl(const int &argc)
{
    star(2);
    return 0;
}

int rl(int argc, char *argv[])
{
    star(3);
    return 0;
}
int localreloadtest(int argc,char *argv[])
{
    const int i=2;
    rl(i);
    return 0;
}
constexpr int  setwindwoswidlen(const int wid,const int len)
{
    return 0;
}
constexpr int windowswid(const int wid,const int len)
{
    setwindwoswidlen(wid,len);
    return wid;
}

int runrecursion(int i)
{
    if (i>0)
    {
        std::cout << "The variable i is " <<dec<<i<<" address is :"<<hex<<(long long int)&i <<"  and the function runrecukrsion address is "<<hex<<(long long int)&runrecursion<< std::endl;
        runrecursion(i-1);
        std::cout << "The variable i address is :"<<dec<<i<<" address is :"<<hex<<(long long int)&i <<"  and the function runrecukrsion address is "<<hex<<(long long int)&runrecursion<< std::endl;
    }
    return 0;
}

int runrecursiontest()
{
    std::cout << "Hello world!" << std::endl;
    runrecursion(10);
    return 0;
}
long long int maxsizeofn(long long int i)
{
    int y,x;
    y=sizeof(i)*8-2;
    long long int max=2;
    for (x=0; x<y; x++)
        max=2*max;
    return (max+max/2);
}
int test_maxsizeofn(int i)
{
    int x;
    x=sizeof(i);
    cout<<"The int number size of is "<<x<<endl;
    cout<<"The int number max number is "<<maxsizeofn(i)<<endl;
    return x;
}
int RunFactTestFn (int imin, int imax)
{
    //input you program:
    int isave = 0;

    isave = imin;
    cout << imin;
    while (imin < imax || imax < imin)
    {
        if (imin < imax)
        {
            imin++;
            isave = isave * imin;
        }
        else
        {
            imin--;
            isave = isave * imin;
        }
        cout << "*" << imin;
    }
    cout << "=";
    return isave;
}

int maintest ()
{
    //input you program:
    cout << RunFactTestFn (20, 12) << endl;
    cout << RunFactTestFn (12, 20) << endl;
    cout << 10 * 11 * 12 << endl;
    return 0;
}

int RunTestFN(int argc,char * argv[] )
{
    funname();
    cout<<__func__<<endl;
    filename();
    cout<<__FILE__<<endl;
    line();
    cout<<__LINE__<<endl;
    timenow();
    datenow();
    const char* (*pmacroa)(int)=nullptr;
    const char* (*pmacrob)(int)=nullptr;
    pmacroa=timenow;
    pmacrob=&timenow;
    star("ptr fun test");
    pmacroa(1);
    pmacrob(1);
    *pmacrob(1);
    return 0;
}

int print (int i)
{
    return 0;
}

int printarrarytest ()
{
    //input your program:
    int y;
    const int x = 6;
    int price[x] = { 4, 5, 6, 7, 9, 10 };
    for (y = 0; y < x; y++)
    {
        cout << price[y] << " ";
    }
    cout << endl;

    return 0;
}
int print_binary (int i)
{
    int x=0;
    int y=i;
    int len =  sizeof (int) * 8 ;
    char cbinary[len];
    for(auto &element:cbinary)
    {
        element='0';
    }
    --len;
    while (i > 0&&len>0)
    {
        x = i % 2;
        if(x==1)
        {
            cbinary[len]='1';
        }
        i = i / 2;
        --len;
    }
    cout <<y<<"的二进制： ";
    for(auto &element:cbinary)
    {
        cout<<element;
    }
    cout<<endl;
    return 0;
}

int RunBinaryTestFN (int argc,char * argv[] )
{
    //input your program:
    int binx = 1;
    while(binx)
    {
        cout<<"Please input a number coversion to binary:(0=exit)";
        cin>>binx;
        print_binary (binx);
        star();
        cout <<binx<<"的二进制： " << bitset < sizeof (binx) * 8 > (binx) << endl;
        star();
        cin.clear();
    }
    return 0;
}

int funpointtest(int argc,char * argv[] )
{
    int (*ptest)(int argc,char* argv[])=nullptr;
    ptest=RunTestFN;
    ptest(argc,argv);
    return 0;
}

int RunBitSetTest(int argc,char * argv[] )
{
    int i=200;
    star();
    cout<<bitset<64>(i)<<endl;
    return 0;
}

int RunTempTest(int argc,char * argv[] )
{
    vector<string> VectorstrName(10);
    string strName="first name";
    VectorstrName.push_back(strName);
    star("start",'-');
    cout<<strName<<endl;
    cout<<VectorstrName[0]<<endl;
    VectorstrName[0]="second name";
    star('-');
    cout<<strName<<endl;
    cout<<VectorstrName[0]<<endl;
    star('-',"end");
    return 0;
}

int RunLocalVarTest(int argc,char * argv[] )
{
    int i=200;
    star();
    cout<<i<<endl;
    {
        int i=100;
        star();
        cout<<i<<endl;
    }
    return 0;
}

int CreateClassTest(int argc,char * argv[] )
{
    cin.clear();
    star('#');
    Fish *pfish=nullptr;
    Fish *pfish2=nullptr;
    Fish smallfish;
    smallfish.name();
    smallfish.baby();
    star('#');
    star("whole",'#');
    Whole BigWhole;
    BigWhole.name();
    BigWhole.baby();
    star('#');
    pfish=&smallfish;
    pfish2=&BigWhole;
    pfish->baby();
    pfish2->baby();
    ++BigWhole;
    BigWhole++;
    star('#');
    Fish One(50);
    Fish Two(One);
    One.name("one");
    cout<<One.getsize()<<endl;
    Two.name("Two");
    cout<<Two.getsize()<<endl;
    One.setsize(40);
    cout<<One.getsize()<<endl;
    cout<<"Two=One"<<endl;
    star('#');
    Two=One;
    cout<<Two.getsize()<<endl;
    Fish Three=Two;
    cout<<Three.getsize()<<endl;
    star('#');
    Fish four(2,4);
    cout<<four.getsize()<<t<<four.getweight()<<endl;
    getchar();
    getchar();
    return 0;
}

class pclass
{
public:
    int m_n=0;
    static int m_m;
    void say()const
    {
        cout<<"say is  "<<this->m_n<<e;
        cout<<"say is  "<<this->m_n<<e;
    }
    void see()
    {
        cout<<"see is  "<<++this->m_n<<e;
        cout<<"see is  "<<this->m_n++<<e;
        this->say();
    }
};
int pclass::m_m=0;
int ClassTestTwo(int argc,char * argv[] )
{
    cin.clear();
    star('#');
    pclass p1;
    cout<<sizeof(pclass)<<e;
    cout<<sizeof(p1)<<e;
    p1.see();
    star('#');
    Whole four(50);
    const std::type_info &r1=typeid(p1);
    cout<<r1.name()<<endl;
    cout<<typeid(four).name()<<endl;
    star('#');
    short i=32768;
    cout<<i<<e;
    i*=i;
    cout<<i<<e;
    star("double",'#');
    double a=1;
    double b=3;
    double c=a/b;
    cout<<c<<e;
    cout<<typeid(c).name()<<e;
    star('#');
    getchar();
    getchar();
    return 0;
}


int DataTypeTest(int argc,char * argv[] )
{
    char c=97;
    cout<<c<<endl;
    cout<<typeid(c).name()<<endl;
    int a=0;
    cout<<a<<endl;
    cout<<typeid(a).name()<<endl;
    short s=2;
    cout<<s<<endl;
    cout<<typeid(s).name()<<endl;
    string str="name";
    cout<<str<<endl;
    cout<<typeid(str).name()<<endl;
    double d=2.2;
    cout<<d<<endl;
    cout<<typeid(d).name()<<endl;
    float f=2.44;
    cout<<f<<endl;
    cout<<typeid(f).name()<<endl;
    int i=0;
    cout<<i++<<t<<i<<e;
    cout<<++i<<t<<i<<e;
    if(4==4)
        cout<<"4==4"<<endl;
    if(4!=3)
        cout<<"4!=3"<<endl;
    if(4>=3)
        cout<<"4>=3"<<endl;
    else
        cout<<"4<3"<<endl;
    if(5<3)
        cout<<"5<3"<<endl;
    else
        cout<<"3<5"<<endl;
    star();
    bool ib=true;
    bool ia=false;
    bool ic=true;
    if(ib)
        cout<<"ib is true"<<endl;
    if(!ib==false)
        cout<<"!ib is false"<<endl;
    if(ib&&ic)
        cout<<"ic&&ib is true"<<endl;
    else
        cout<<"ic&&ib is false"<<endl;
    if(ia&&ib)
        cout<<"ia&&ib is true"<<endl;
    else
        cout<<"ia&&ib is false"<<endl;
    return 0;
}

int IfTest(int argc,char * argv[] )
{
    bool itest=false;
    cout<<"Please a number:"<<endl;
    int number=0;
    cin>>number;
    if(number>600)
        itest=true;
    else
        itest=false;
    if(itest)
        cout<<"is ok"<<endl;
    else
        cout<<"is terrible"<<endl;
    return 0;
}


int SwitchTest(int argc,char * argv[] )
{
    cout<<"Please a number:"<<endl;
    int nchoice=0;
    cin>>nchoice;
    switch (nchoice)
    {
    case 1:
        cout<<nchoice<<endl;
        break;
    case 2:
        cout<<nchoice<<endl;
        break;
    case 3:
        cout<<nchoice<<endl;
        break;
    default:
        cout<<"default:"<<nchoice<<endl;
        break;
    }
    return 0;
}

int ForTest(int argc,char * argv[] )
{
    for(int i=0; i<10; ++i)
    {
        for(int j=0; j<10; ++j)
            if((j%2))
                cout<<'#';
            else
                cout<<'*';
        cout<<e;
    }
    int narra[20];
    for(int i=0; i<20; i++)
    {
        cout<<"#:"<<&narra[i]<<t;
        if((i+1)%3==0)
            cout<<endl;
    }
    cout<<endl;
    int narrb[]= {1,2,3,4,5,6,7,8,9,0};
    star();
    cout<<sizeof(narra)<<endl;
    cout<<(narra)<<endl;
    cout<<sizeof(narrb)<<endl;
    cout<<(narrb)<<endl;
    star();
    cout<<"Print plus table"<<endl;
    for(int i=1; i<10; ++i)
    {
        for(int j=1; j<=i; ++j)
            cout<<j<<"*"<<i<<"="<<i*j<<t;
        cout<<e;
    }
    return 0;
}

int FindArrayMaxTest(int argc, char *argv[])
{
    int arraya[]= {3333,488,3,7,899,0,4,28,1333,88,99,32,48,5555};
    int max=0;
    for(int i=0; i<sizeof(arraya)/sizeof(arraya[0]); ++i)
        if(max<arraya[i])
            max=arraya[i];
    cout<<"Max value of array is : "<<max<<endl;
    int start=0;
    int end=sizeof(arraya)/sizeof(arraya[0])-1;
    auto tmp=arraya[0];
    star();
    for(int i=0; i<sizeof(arraya)/sizeof(arraya[0]); ++i)
        cout<<arraya[i]<<' ';
    cout<<endl;
    for(; start<end; ++start,--end)
    {
        tmp=arraya[start];
        arraya[start]=arraya[end];
        arraya[end]=tmp;
    }
    cout<<"Resort Array"<<endl;
    star();
    for(int i=0; i<sizeof(arraya)/sizeof(arraya[0]); ++i)
        cout<<arraya[i]<<' ';
    cout<<endl;
    return 0;
}

struct student
{
    int age;
    string  name;
};

struct teacher
{
    string  name;
    int age=0;
    struct student OneStudent;
};


int BubleSortTest(int argc,char * argv[] )
{
    int arraya[]= {3333,488,3,7,899,0,4,28,1333,88,99,32,48,5555};
    int nMax=sizeof(arraya)/sizeof(arraya[0]);
    auto itemp=arraya[0];
    cout<<endl;
    star();
    cout<<"Pointer size is "<<sizeof(int *)<<endl;
    star();
    cout<<"arraya size is "<<sizeof(arraya)<<endl;
    star();
    for(auto i:arraya)
        cout<<i<<' ';
    cout<<endl;
    star();
    student Astudent= {18,"jack"};
    teacher Ateacher= {"Smith",20,Astudent};
    cout<<Astudent.age<<t<<Astudent.name<<endl;
    cout<<Ateacher.age<<t<<Ateacher.name<<t<<Ateacher.OneStudent.name<<endl;
    star();
    return 0;
}

class Run
{
public:
    virtual void One() {};
    //    virtual void ne(){};
    //    virtual void ine(){};
    //    virtual void xne(){};
    void operator ()(string name,int age)
    {
        cout<<name<<":"<<age<<endl;
    };
    void operator ()(string name)
    {
        cout<<name<<endl;
    };
    void operator ()(int a,int b)
    {
        cout<<a<<t<<b<<endl;
    };
};

class RunCommandSecond:public Run
{
public:
    virtual void One()
    {
        cout<<"RuncommandSecond vitural One"<<endl;
    };
};

class RunCommand:public Run
{
public:
    virtual void One()
    {
        cout<<"Runcommand vitural One"<<endl;
    };
};

class cell
{
public:
    int size;
    cell()
    {
        cout<<"cell "<<endl;
        size=0;
    };
    virtual ~cell()
    {
        cout<<"~cell "<<endl;
        size=0;
    };
    void lsize()
    {
        cout<<"My size is : "<<sizeof(*this)<<endl;
    };
    void say()
    {
        cout<<"Cell One is say..."<<endl;
    };
};

class live:public  cell
{
public:
    int age;
    live()
    {
        cout<<"live"<<endl;
    }
    ~live()
    {
        cout<<"~live"<<endl;
    }
};
class man:public live
{
public:
    int lage;
    man()
    {
        cout<<"man"<<endl;
    }
    ~man()
    {
        cout<<"~man"<<endl;
    }
};

class animal:public virtual cell
{
public:
    int speed;
    animal()
    {
        cout<<"animal"<<endl;
    }
    virtual ~animal()
    {
        cout<<"~animal"<<endl;
    }
};

class planet:public virtual cell
{
public:
    int hight;
    planet()
    {
        cout<<"planet"<<endl;
    }
    virtual ~planet()
    {
        cout<<"~planet"<<endl;
    }
};

class tiger:virtual public animal,virtual public planet
{
public:
    int tail;
    tiger()
    {
        cout<<"tiger"<<endl;
    }
    ~tiger()
    {
        cout<<"~tiger"<<endl;
    }
};

int SystemCommandTest(int argc,char * argv[] )
{
    system("clear");
    /*    Run One;
    //    One("good",200);
    //    One("One");
    //    One(2,4);
    cout<<"ONE size of is : "<<sizeof(One)<<endl;
    RunCommandSecond two;
    RunCommand wo;
    Run *p=&two;
    p->One();
    p=&wo;
    p->One();
    star("oh");
    cell ok;
    ok.say();
    cout<<"OK size is : "<<sizeof(ok)<<endl;
    ok.lsize();
    star("ok");
    star("tiger");*/
    //    system("free -h");
    cell * PCell=new planet;
    PCell->lsize();
    cout<<"Small size is : "<<sizeof(*PCell)<<endl;
    delete PCell;
    star("ok");
    live * Pman=new man;
    delete Pman;
    return 0;
}

int MenuAddTest(int argc,char * argv[] )
{
    vector<string>Menu;
    vector<PFp>Command;
    string strMenuTitle="New Menu to run a command,choice 0 = exit...";
    Menu.push_back(strMenuTitle);
    Command.push_back(nullptr);
    string strMenuName;
    strMenuName="FindArrayMaxTest";
    Menu.push_back(strMenuName);
    Command.push_back(FindArrayMaxTest);

    strMenuName="ForTest";
    Menu.push_back(strMenuName);
    Command.push_back(ForTest);

    strMenuName="SwitchTest";
    Menu.push_back(strMenuName);
    Command.push_back(SwitchTest);

    strMenuName="IfTest";
    Menu.push_back(strMenuName);
    Command.push_back(IfTest);

    strMenuName="DataTypeTest";
    Menu.push_back(strMenuName);
    Command.push_back(DataTypeTest);

    strMenuName="SystemCommandTest";
    Menu.push_back(strMenuName);
    Command.push_back(SystemCommandTest);

    strMenuName="BubleSortTest";
    Menu.push_back(strMenuName);
    Command.push_back(BubleSortTest);
    RunMenuMU(argc, argv,Menu,Command);
    return 0;
}
int OpenBinaryFileTest(int argc,char * argv[] )
{
    ofstream of;
    ifstream in;
    float nnumber=3.4;
    float xnumber=0.4;
    of.open("recode",ios::binary|ios::out);
    char *firstline="name is open file open.txt\t\n";
    of.write(firstline,strlen(firstline));
    char *secondline="second line txt in\n";
    of.write(secondline,strlen(secondline));
    of<<nnumber;
    of.close();
    in.open("recode",ios::binary|ios::out);
    char *buf=new char[1024];
    while(in>>buf)
    {
        cout<<buf<<endl;
    }
    cout<<endl;
    in.close();
    star("getline buf");
    in.open("recode",ios::binary|ios::out);
    in.getline(buf,sizeof(buf));
    cout<<buf<<endl;
    in.getline(buf,sizeof(buf));
    cout<<buf<<endl;
    in>>xnumber;
    cout<<xnumber;
    in.close();
    star();
    delete []buf;
    return 0;
}

int OpenFileTest(int argc,char * argv[] )
{
    ofstream of;
    float nnumber=3.4;
    float xnumber=0.4;
    of.open("open.txt",ios::binary|ios::out);
    of<<"name is open file open.txt\t\n";
    of<<"second line txt in\n";
    of<<nnumber;
    of.close();
    star("getline");
    ifstream in;
    in.open("open.txt",ios::binary|ios::in);
    string getl;
    //    in>>getl;
    getline(in,getl);
    cout<<getl<<endl;
    getline(in,getl);
    cout<<getl<<endl;
    in>>xnumber;
    cout<<xnumber<<endl;
    in.close();
    star("bufwhile");
    in.open("open.txt",ios::binary|ios::in);
    char *buf=new char[1024];
    while(in>>buf)
    {
        cout<<buf<<endl;
    }
    cout<<endl;
    in.close();
    star("getline buf");
    in.open("open.txt",ios::binary|ios::in);
    in.getline(buf,sizeof(buf));
    cout<<buf<<endl;
    in.getline(buf,sizeof(buf));
    cout<<buf<<endl;
    in>>xnumber;
    cout<<xnumber;
    in.close();
    star();
    delete []buf;
    return 0;
}

int TempAddTest(int argc,char * argv[] )
{
    cout<<tadd(100,200)<<endl;
    cout<<add<int>(100,200)<<endl;
    cout<<add(100,200)<<endl;
    cout<<tadd(100.2,200.4)<<endl;
    cout<<add<float>(100.2,200.4)<<endl;
    cout<<tadd(0.2,0.4)<<endl;
    cout<<add<double>(0.2,0.4)<<endl;
    cout<<sub<double,int >(10.2,4)<<endl;
    return 0;
}

int TempClassTest(int argc, char *argv[])
{
    string *pname=new string("Mark.Smith Mrs");
    string *p=new string(*pname);
    Lion LionKing(*pname,20);
    LionKing.yell();
    cout<<tadd<int>(100,100)<<endl;
    cout<<tadd<float>(100.11,100.0)<<endl;
    star("None");
    Lion None(LionKing);
    star("two");
    Lion two=LionKing;
    two=None;
    star("three");
    Lion three(LionKing);
    three=two;
    three.yell(None);
    cout<<pname<<e;
    cout<<*pname<<e;
    cout<<p<<e;
    cout<<*p<<e;
    delete pname;
    delete p;
    return 0;
}

    template <class T>
int listvector(const vector<T>&r)
{
    int il=0;
    star('_');
    cout<<"vector capacity is "<<r.capacity()<<endl;
    for(auto i:r)
    {
        cout<<i;
        //            if((ic++%10)==9)
        if(++il%10==0)
            cout<<e;
        else
            cout<<"\t";
    }
    cout<<endl;
    star('_');
    return 0;
}

int VectorTest(int argc,char * argv[] )
{
    vector<int> i_vector_one(10);
    star('_');
    star("start");
    for(auto &i:i_vector_one)
    {
        cout<<i<<t;
    }
    cout<<e;
    star(1);

    decltype(i_vector_one.size()) j=0;
    for(auto i=i_vector_one.size(),j=i_vector_one.size()-i_vector_one.size(); i>0; --i,++j)
    {
        i_vector_one.push_back(j);
        cout<<"i is: "<<i<<" --i "<<"plug in j: "<<j<<" ++j"<<endl;
    }
    int il=0;
    for(auto i:i_vector_one)
    {
        //            if((ic++%10)==9)
        if(++il%10==0)
            cout<<i<<e;
        else
            cout<<i<<t;
    }
    cout<<e;
    star('_');
    vector<int>v4;
    if(v4.empty())
        cout<<"V4 is empty"<<endl;
    star('_');
    if(v4.begin()==v4.end())
        cout<<"V4 is empty"<<endl;
    star('_');
    v4.push_back(10);
    cout<<"V4 capicaty is "<<v4.capacity()<<endl;
    star('_');
    cout<<"V4 size is "<<v4.size()<<endl;
    star('_');
    v4.resize(10,50);
    listvector<int>(v4);
    star('_');
    for(vector<int>::const_iterator it=v4.begin(); it!=v4.end(); ++it)
        cout<<*it<<"  ";
    cout<<endl;
    star('_');
    int ic=v4.capacity();
    int *ipc=&v4[0];
    int ipcc=0;
    int icc=0;
    for(int i=0; i<10'000; ++i)
    {
        v4.push_back(i*3);
        if(ic!=v4.capacity())
        {
            ic=v4.capacity();
            ++icc;
        }
        if(ipc!=&v4[0])
        {
            ipc=&v4[0];
            ++ipcc;
        }
    }
    cout<<"resize capactity is "<<icc<<endl;
    cout<<"V4 capicaty is "<<v4.capacity()<<endl;
    star('_');
    cout<<"resize realloc is "<<ipcc<<endl;
    cout<<"V4 size is "<<v4.size()<<endl;
    v4.resize(50);
    cout<<"V4 size is "<<v4.size()<<endl;
    cout<<"V4 capicaty is "<<v4.capacity()<<endl;
    v4.assign(v4.begin(),v4.end());
    cout<<"V4 size is "<<v4.size()<<endl;
    cout<<"V4 capicaty is "<<v4.capacity()<<endl;
    star('_');
    star("list v4",'_');
    listvector<int>(v4);
    star('_');
    vector<int>v5(v4.begin()+10,v4.begin()+50);
    listvector<int>(v5);
    star('_');
    vector<int>v6(100,*(v4.begin()+30));
    listvector<int>(v6);
    return 0;
}

int AsciiTest(int argc,char * argv[] )
{
    cout<<"Start print assiitable...\n";
    vector <char>AsciiTable;
    for(int i=33; i<127; ++i,++n)
    {
        AsciiTable.push_back(i);
    }
    star('#');
    int ic=0;
    for(auto i:AsciiTable)
    {
        if(++ic%10==0)
            cout<<e;
        cout<<(int)i<<':'<<(char)i<<t;
    }
    cout<<endl;
    star('#');
    cout<<AsciiTable.size()<<endl;
    AsciiTable.insert(AsciiTable.begin()+10,'#');
    star('#');
    listvector<char>(AsciiTable);
    star('#');
    getchar();
    getchar();
    return 0;
}

    template <class T>
int listdeque(const deque<T>&r)
{
    int il=0;
    star('_');
    for(auto i:r)
    {
        cout<<i;
        //            if((ic++%10)==9)
        if(++il%10==0)
            cout<<e;
        else
            cout<<"\t";
    }
    if(il%10!=0)
        cout<<endl;
    return 0;
}

    template <class T>
int makedeque(deque<T>&r,int nsize,int mod)
{
    for(int i=0; i<nsize; ++i)
        r.push_back(rand()%mod);
    return 0;
}

int DequeTest(int argc, char *argv[])
{
    deque<int>ade;
    star("rbegin compare rend if equal:");
    if(ade.rbegin()==ade.rend())
        cout<<"deque is empty "<<endl;
    star("begin compare end if equal:");
    if(ade.begin()==ade.end())
        cout<<"deque is empty "<<endl;
    star("test deque member empty():");
    if(ade.empty())
        cout<<"deque is empty "<<endl;
    star();
    int nitial=20;
    int ntimes=10;
    cout<<"please input a number to inital deque:";
    cin>>nitial;
    cout<<"please input a number to times inital size";
    cin>>ntimes;
    star("test deque member resize():");
    ade.resize(ntimes,nitial);
    cout<<"deque size is  "<<ade.size()<<endl;
    if(!ade.empty())
        cout<<"deque is not empty "<<endl;
    for(auto i:ade)
        cout<<i<<t;
    cout<<endl;
    cout<<"resize size is ?"<<endl;
    int nresize=0;
    cin>>nresize;
    ade.resize(nresize);
    for(auto i:ade)
        cout<<i<<t;
    cout<<endl;
    star('_');
    int ii=0;
    for(auto &i:ade)
    {
        i=++ii;
        cout<<i<<t;
    }
    cout<<endl;
    star('_');
    ade.pop_back();
    cout<<"remove back"<<endl;
    for(auto i:ade)
        cout<<i<<t;
    cout<<endl;
    star('_');
    cout<<"remove front"<<endl;
    ade.pop_front();
    for(auto i:ade)
        cout<<i<<t;
    cout<<endl;
    star('_');
    return 0;
}

int DequeTestTwo(int argc,char * argv[] )
{
    demoArray<int> ArrayOne(20);
    ArrayOne.setallrandom();
    ArrayOne[9]=6;
    ArrayOne[7]=5;
    star();
    ArrayOne.list();
    star();
    deque<int>done;
    makedeque<int>(done,100,1000);
    listdeque<int>(done);
    sort(done.begin(),done.end());
    listdeque<int>(done);
    deque<int>dscore;
    deque<int>dman;
    int score;
    for(int i=0; i<10; ++i)
    {
        score=0;
        for(int i=0; i<10; ++i)
        {
            score=rand()%41+60;
            dscore.push_back(score);
        }
        sort(dscore.begin(),dscore.end());
        cout<<i<<"# man score is "<<endl;
        listdeque<int>(dscore);
        dscore.pop_back();
        dscore.pop_front();
        cout<<i<<"# man resort clean score is "<<endl;
        listdeque<int>(dscore);
        score=0;
        for(auto i:dscore)
            score+=i;
        score/=dscore.size();
        cout<<i<<"# man Avg score is : "<<score<<endl;
        dman.push_back(score);
        dscore.clear();
    }
    star();
    cout<<"all man avg is :"<<endl;
    listdeque<int>(dman);
    star();
    return 0;
}

    template <class T>
int MakeStack(stack<T>&r,int num,int mod)
{
    for(int i=0; i<num; ++i)
        r.push(random()%mod);
    return 0;
}

int StackTest(int argc,char * argv[] )
{
    stack<int>stack1;
    stack1.push(10);
    stack1.push(20);
    cout<<"stack1 data top is "<<stack1.top()<<endl;
    cout<<"stack1 data top is "<<stack1.top()<<endl;
    stack1.pop();
    cout<<"stack1 data top is "<<stack1.top()<<endl;
    cout<<"stack1 size is"<<stack1.size()<<endl;
    cout<<stack1.empty()<<endl;
    MakeStack<int>(stack1,20,1000);
    star();
    cout<<"stack1 data top is "<<stack1.top()<<endl;
    cout<<"stack1 size is"<<stack1.size()<<endl;
    stack1.pop();
    cout<<"stack1 data top is "<<stack1.top()<<endl;
    cout<<"stack1 size is"<<stack1.size()<<endl;
    stack1.pop();
    cout<<"stack1 data top is "<<stack1.top()<<endl;
    cout<<"stack1 size is"<<stack1.size()<<endl;
    return 0;
}

int QueueTest(int argc,char * argv[] )
{
    queue<int>dinerqueue;
    int mod=1000;
    int em;
    for(int i=0; i<10; ++i)
    {
        em=random()%mod;
        cout<<em<<t;
        dinerqueue.push(em);
    }
    cout<<endl;
    star();
    cout<<dinerqueue.front()<<endl;
    cout<<dinerqueue.back()<<endl;
    cout<<dinerqueue.size()<<endl;
    star();
    dinerqueue.pop();
    cout<<dinerqueue.front()<<endl;
    cout<<dinerqueue.back()<<endl;
    cout<<dinerqueue.size()<<endl;
    star();
    queue<int>queueb;
    queueb=dinerqueue;
    cout<<queueb.size()<<endl;
    return 0;
}
    template <class T>
int listlist(const list<T>&r)
{
    int il=0;
    star('_');
    for(auto i:r)
    {
        cout<<i;
        //            if((ic++%10)==9)
        if(++il%10==0)
            cout<<e;
        else
            cout<<"\t";
    }
    if(il%10!=0)
        cout<<endl;
    return 0;
}


    template <class T>
int MakeList(list<T>&r,int mod)
{
    for(auto &i:r)
        i=random()%mod;
    return 0;
}

    template <typename T>
int printList(list<T>&r)
{
    int il=0;
    for(typename list<T>::iterator it=r.begin(); it!=r.end(); ++it)
    {
        cout<<*it;
        if(++il%10==0)
            cout<<e;
        else
            cout<<"\t";
    }
    if(il%10!=0)
        cout<<endl;
    return 0;
}

    template<typename T>
bool rcmp(T a,T b)
{
    return a<b;
}

    template<typename T>
bool cmp(T a,T b)
{
    return a>b;
}

int ListTest(int argc,char * argv[] )
{
    list<int>l1(20,10);
    cout<<l1.size()<<endl;
    listlist<int>(l1);
    star("l1");
    MakeList<int>(l1,10);
    listlist<int>(l1);
    star("l2");
    list<int>l2(l1);
    listlist<int>(l2);
    star("l3");
    list<int>l3=l1;
    listlist<int>(l3);
    star("l4");
    list<int>l4;
    l4=l1;
    listlist<int>(l4);
    list<int>l5;
    l5.assign(++l4.begin(),--l4.end());
    star("l5");
    listlist<int>(l5);
    int ia=l4.size()-l5.size();
    cout<<ia<<endl;
    l5.resize(10);
    star("l5 resize");
    listlist<int>(l5);
    l5.swap(l4);
    star("swap after l4");
    listlist<int>(l4);
    star("l5");
    listlist<int>(l5);
    star("l4 resize (30)");
    l4.resize(20);
    listlist<int>(l4);
    l4.resize(10,7);
    listlist<int>(l4);
    l4.resize(10,9);
    list<int>::iterator it=l4.begin();
    l4.insert(it,8);
    l4.insert(it,8);
    l4.insert(it,8);
    l4.insert(it,8);
    star('=');
    printList<int>(l4);
    l4.remove(8);
    printList<int>(l4);
    l4.clear();
    star("list 4=");
    printList<int>(l4);
    star("list 3=");
    printList<int>(l3);
    cout<<"L3 first element is "<<l3.front()<<endl;
    cout<<"L3 end element is "<<l3.back()<<endl;
    l3.reverse();
    star("list 3 reverse");
    printList<int>(l3);
    star("list 3 sort");
    l3.sort();
    printList<int>(l3);
    star("list 3 cmp");
    //    l3.reverse();
    //    printList<int>(l3);
    l3.sort(cmp<int>);
    printList<int>(l3);
    star("list 3 rcmp");
    l3.sort(rcmp<int>);
    printList<int>(l3);
    return 0;
}

int RunMyTestFN(int argc, char *argv[])
{
    vector<string>Menu;
    vector<PFp>Command;
    string strMenuTitle="Please choice a Menu command No to run a command,choice 0 = exit...";
    Menu.push_back(strMenuTitle);
    Command.push_back(nullptr);
    string strMenuName;

    strMenuName="ListTest";
    Menu.push_back(strMenuName);
    Command.push_back(ListTest);

    strMenuName="QueueTest";
    Menu.push_back(strMenuName);
    Command.push_back(QueueTest);

    strMenuName="StackTest";
    Menu.push_back(strMenuName);
    Command.push_back(StackTest);

    strMenuName="DequeTestTwo";
    Menu.push_back(strMenuName);
    Command.push_back(DequeTestTwo);

    strMenuName="DequeTest";
    Menu.push_back(strMenuName);
    Command.push_back(DequeTest);

    strMenuName="TestGround";
    Menu.push_back(strMenuName);
    Command.push_back(TestGround);

    strMenuName="OpenFileTest";
    Menu.push_back(strMenuName);
    Command.push_back(OpenFileTest);

    strMenuName="VectorTest";
    Menu.push_back(strMenuName);
    Command.push_back(VectorTest);

    strMenuName="TempClassTest";
    Menu.push_back(strMenuName);
    Command.push_back(TempClassTest);

    strMenuName="TempAddTest";
    Menu.push_back(strMenuName);
    Command.push_back(TempAddTest);

    strMenuName="MenuAddTest";
    Menu.push_back(strMenuName);
    Command.push_back(MenuAddTest);
    strMenuName="AsciiTest";
    Menu.push_back(strMenuName);
    Command.push_back(AsciiTest);

    strMenuName="CreateClassTest";
    Menu.push_back(strMenuName);
    Command.push_back( CreateClassTest);

    strMenuName="RunLocalVarTest";
    Menu.push_back(strMenuName);
    Command.push_back(RunLocalVarTest);

    Menu.push_back("Run Binary Number Print Module");
    Command.push_back(RunBinaryTestFN);

    Menu.push_back("RunFactTestFn");
    Command.push_back(RunFactTestFn);

    Menu.push_back("RunArrayTestFN");
    Command.push_back(RunArrayTestFN);

    Menu.push_back("Run Main Module");
    Command.push_back( RunMainShell);

    RunMenuMU(argc, argv,Menu,Command);

    return 0;
}

    template<typename T>
int MakeDisplaySet(set<T>&r)
{
    int ic=0;
    for(auto i:r)
    {
        cout<<i;
        if(++ic%10==0)
            cout<<endl;
        else
            cout<<'\t';
    }
    if(ic%10==0)
        cout<<endl;
    return 0;
}

    template<typename T>
int MakeRandomSet(set<T>&r,int num,int mod)
{
    for(int i=0;i<num;++i)
        r.insert(random()%mod);
    return 0;
}

int TestGround(int argc,char * argv[] )
{
    set<int>iset;
    MakeRandomSet<int>(iset,20,1000);


    return 0;
}
int Test(int argc,char * argv[] )
{
    return 0;
}

